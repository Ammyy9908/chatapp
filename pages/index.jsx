import Head from "next/head";
import Image from "next/image";
import Main from "../components/Main";
import Profile from "../components/Profile";
import Sidebar from "../components/Sidebar";
import styles from "../styles/Home.module.css";
import React from "react";
import ChatInfo from "../components/ChatInfo";
import axios from "axios";
import useAuth from "../hooks/useAuth";
import { useRouter } from "next/router";
import { doc, getFirestore, setDoc } from "firebase/firestore";
import { signInWithGoogle } from "../utils/google-signin";
import NewChatPanel from "../components/NewChatPanel";
import NewContact from "../components/NewContact";
import getCurrentUserData from "../utils/getUser";
import TakePhoto from "../components/TakePhoto";
import { connect } from "react-redux";
const database = getFirestore();

function Home({ setUser }) {
  const [profile, setProfile] = React.useState(false);
  const [new_chat, setNewChat] = React.useState(false);
  const [new_contact, setNewContact] = React.useState(false);
  const [webcam, setWebCam] = React.useState(false);
  const router = useRouter();
  const user = useAuth();

  // set the user from firebase

  React.useEffect(() => {
    if (user) {
      getCurrentUserData(user.uid)
        .then((u) => {
          console.log("User data", u);
          setUser(u);
        })
        .catch((e) => {
          console.log(e);
        });
    }
  }, [user]);

  const [mounted, setMounted] = React.useState(false);

  React.useEffect(() => {
    setTimeout(() => {
      setMounted(true);
    }, 3000);
  }, []);

  const [emojis, setEmojis] = React.useState(false);
  React.useEffect(() => {
    const getEmojis = async () => {
      try {
        const r = await axios.get(
          `https://raw.githubusercontent.com/github/gemoji/master/db/emoji.json`
        );
        return r.data;
      } catch (e) {
        return false;
      }
    };
    getEmojis()
      .then((res) => {
        console.log(res);
        setEmojis(res);
      })
      .catch((e) => {
        console.log(e);
      });
  }, []);

  const handleAuthentication = () => {
    signInWithGoogle()
      .then(async (user) => {
        console.log(user);
        let exist = await getCurrentUserData(user.user.uid);
        if (!exist) {
          createNewUserData(user.user);
        }
      })
      .catch((e) => {
        console.log(e);
      });
  };

  async function createNewUserData(user) {
    console.log("User after Creating", user);
    const collectionRef = doc(database, "users", user.uid);

    setDoc(collectionRef, {
      contacts: [],
      avatar: user.photoURL,
      uid: user.uid,
      email: user.email,
      name: user.displayName,
    })
      .then(function (docRef) {
        console.log(docRef);
        router.push("/");
      })
      .catch(function (error) {
        console.error("Error adding document: ", error);
      });
  }
  return (
    <div className={styles.container}>
      <Head>
        <title>FireChat</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {mounted && (
        <>
          {user ? (
            <div>
              <div className={styles.app}>
                <Sidebar
                  setProfile={setProfile}
                  setNewChat={setNewChat}
                  setWebCam={setWebCam}
                />
                <Main emojis={emojis} />
              </div>
              <Profile
                setProfile={setProfile}
                profile={profile}
                setWebCam={setWebCam}
              />
              <NewChatPanel
                setNewChat={setNewChat}
                new_chat={new_chat}
                setNewContact={setNewContact}
              />
              {new_contact && (
                <NewContact
                  new_contact={new_contact}
                  setNewContact={setNewContact}
                />
              )}
              {webcam && <TakePhoto setWebCam={setWebCam} />}
            </div>
          ) : (
            <div className={styles.auth__screen}>
              <div
                className={styles.google_login_btn}
                tabIndex="1"
                onClick={handleAuthentication}
              >
                <button>
                  <div className={styles.google_logo}>
                    <img src="/glogo.png" alt="google-icon" />
                  </div>
                  <span>Sign in with Google</span>
                </button>
              </div>
            </div>
          )}
        </>
      )}
    </div>
  );
}

const mapDispatchToProps = (dispatch) => ({
  setUser: (user) => dispatch({ type: "SET_USER", user }),
});

export default connect(null, mapDispatchToProps)(Home);
